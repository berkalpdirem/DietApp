// <auto-generated />
using System;
using DietApp.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DietApp.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230926135529_1Mig")]
    partial class _1Mig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DietApp.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("DietApp.Entities.Concrete.Food", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("DietApp.Entities.Concrete.FoodDetails", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Calories")
                        .HasColumnType("int");

                    b.Property<int>("FoodID")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("ID");

                    b.HasIndex("FoodID")
                        .IsUnique();

                    b.ToTable("FoodDetails");
                });

            modelBuilder.Entity("DietApp.Entities.Concrete.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DietApp.Entities.Concrete.UserDayMealsFoods", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FoodID")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("Meal")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<decimal>("Portion")
                        .HasPrecision(2, 1)
                        .HasColumnType("decimal(2,1)");

                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("ID");

                    b.HasIndex("FoodID");

                    b.HasIndex("UserID");

                    b.ToTable("UserDayMealsFoods");
                });

            modelBuilder.Entity("DietApp.Entities.Concrete.Food", b =>
                {
                    b.HasOne("DietApp.Entities.Concrete.Category", "Category")
                        .WithMany("Foods")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DietApp.Entities.Concrete.FoodDetails", b =>
                {
                    b.HasOne("DietApp.Entities.Concrete.Food", "Food")
                        .WithOne("FoodDetails")
                        .HasForeignKey("DietApp.Entities.Concrete.FoodDetails", "FoodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");
                });

            modelBuilder.Entity("DietApp.Entities.Concrete.UserDayMealsFoods", b =>
                {
                    b.HasOne("DietApp.Entities.Concrete.Food", "Food")
                        .WithMany("UserDayMealsFoods")
                        .HasForeignKey("FoodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DietApp.Entities.Concrete.User", "User")
                        .WithMany("UserDayMealsFoods")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DietApp.Entities.Concrete.Category", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("DietApp.Entities.Concrete.Food", b =>
                {
                    b.Navigation("FoodDetails")
                        .IsRequired();

                    b.Navigation("UserDayMealsFoods");
                });

            modelBuilder.Entity("DietApp.Entities.Concrete.User", b =>
                {
                    b.Navigation("UserDayMealsFoods");
                });
#pragma warning restore 612, 618
        }
    }
}
